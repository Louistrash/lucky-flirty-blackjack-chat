import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useCurrentUser } from "app";
import { usePlayerProgressStore } from "../utils/usePlayerProgressStore";
import { isAdminUser } from "../utils/adminDealerManager";
import { auth } from "../app/auth/auth";
import { useUserOnboarding } from "../utils/useUserOnboarding";
import { AppHeader } from "../components/AppHeader";
import { useTranslation } from "react-i18next";

// User Types
type UserType = 'free' | 'premium' | 'admin';

interface UserProfile {
  userType: UserType;
  subscriptionExpiry?: Date;
  totalWins: number;
  totalCoinsEarned: number;
  favoriteDealer?: string;
  achievements: string[];
  unlockedDealers: string[];
}

interface TokenDeal {
  id: string;
  name: string;
  coins: number;
  price: number;
  originalPrice?: number;
  popular?: boolean;
  bonus?: string;
}

const ProfilePage = () => {
  const navigate = useNavigate();
  const { t } = useTranslation();
  const { user } = useCurrentUser();
  const { playerData, subscribeToPlayerProgress, updatePlayerCoins, isLoading: playerProgressLoading } = usePlayerProgressStore();
  const { onboardingStatus, unlockDealerImage, getUserProfile } = useUserOnboarding();
  
  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);
  const [userType, setUserType] = useState<UserType>('free');
  const [isLoading, setIsLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<'profile' | 'tokens' | 'dealers' | 'achievements' | 'admin'>('profile');
  const [purchaseStatus, setPurchaseStatus] = useState<{ [key: string]: 'idle' | 'processing' | 'success' | 'error' }>({});

  // Updated Token Deals - meer realistisch prijssysteem
  const tokenDeals: TokenDeal[] = [
    {
      id: 'starter',
      name: 'Starter Pack',
      coins: 500,
      price: 5.00,
      bonus: 'Perfect om te beginnen'
    },
    {
      id: 'popular',
      name: 'Popular Choice',
      coins: 1200,
      price: 10.00,
      originalPrice: 12.00,
      popular: true,
      bonus: '+200 bonus coins'
    },
    {
      id: 'best-value',
      name: 'Best Value',
      coins: 2500,
      price: 20.00,
      originalPrice: 25.00,
      bonus: '+500 bonus coins'
    },
    {
      id: 'mega',
      name: 'Mega Pack',
      coins: 5000,
      price: 35.00,
      originalPrice: 50.00,
      bonus: '+1000 bonus coins'
    },
    {
      id: 'ultimate',
      name: 'Ultimate',
      coins: 10000,
      price: 60.00,
      originalPrice: 100.00,
      bonus: '+2000 bonus coins'
    }
  ];

  // Subscribe to player progress
  useEffect(() => {
    if (user?.uid) {
      const unsubscribe = subscribeToPlayerProgress(user.uid);
      return unsubscribe;
    }
  }, [user, subscribeToPlayerProgress]);

  // Load user profile data
  useEffect(() => {
    const loadUserProfile = async () => {
      if (!user?.uid) {
        setIsLoading(false);
        return;
      }

      try {
        // Check if admin
        const isAdmin = await isAdminUser(user.uid);
        
        // Get user profile from Firestore
        const profile = await getUserProfile();
        
        if (profile) {
          setUserProfile({
            userType: profile.userType || (isAdmin ? 'admin' : 'free'),
            totalWins: profile.totalWins || 0,
            totalCoinsEarned: profile.totalCoinsEarned || 0,
            achievements: profile.achievements || [],
            unlockedDealers: profile.unlockedDealers || []
          });
          setUserType(profile.userType || (isAdmin ? 'admin' : 'free'));
        } else {
          // Fallback for users without profile
          setUserType(isAdmin ? 'admin' : 'free');
          setUserProfile({
            userType: isAdmin ? 'admin' : 'free',
            totalWins: 0,
            totalCoinsEarned: 0,
            achievements: [],
            unlockedDealers: []
          });
        }
      } catch (error) {
        console.error('Error loading user profile:', error);
        setUserType('free');
      } finally {
        setIsLoading(false);
      }
    };

    loadUserProfile();
  }, [user, getUserProfile]);

  const handlePurchaseTokens = async (deal: TokenDeal) => {
    if (!user?.uid) return;

    setPurchaseStatus(prev => ({ ...prev, [deal.id]: 'processing' }));

    try {
      // Simulate payment processing
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Add coins to player account
      const totalCoins = deal.coins + (deal.bonus && deal.bonus.includes('+') ? parseInt(deal.bonus.match(/\d+/)?.[0] || '0') : 0);
      await updatePlayerCoins(user.uid, totalCoins);
      
      setPurchaseStatus(prev => ({ ...prev, [deal.id]: 'success' }));
      
      // Reset status after 3 seconds
      setTimeout(() => {
        setPurchaseStatus(prev => ({ ...prev, [deal.id]: 'idle' }));
      }, 3000);
    } catch (error) {
      console.error('Purchase failed:', error);
      setPurchaseStatus(prev => ({ ...prev, [deal.id]: 'error' }));
      
      setTimeout(() => {
        setPurchaseStatus(prev => ({ ...prev, [deal.id]: 'idle' }));
      }, 3000);
    }
  };

  const handleUnlockDealer = async (dealerId: string) => {
    const result = await unlockDealerImage(dealerId, 200);
    if (result.success) {
      alert(`✅ ${result.message}`);
      // Refresh user profile
      const updatedProfile = await getUserProfile();
      if (updatedProfile) {
        setUserProfile(prev => prev ? {
          ...prev,
          unlockedDealers: updatedProfile.unlockedDealers || []
        } : null);
      }
    } else {
      alert(`❌ ${result.message}`);
    }
  };

  const getUserTypeColor = (type: UserType) => {
    switch (type) {
      case 'admin': return 'from-red-500 to-pink-500';
      case 'premium': return 'from-purple-500 to-indigo-500';
      case 'free': return 'from-gray-500 to-slate-500';
      default: return 'from-gray-500 to-slate-500';
    }
  };

  const getUserTypeBadge = (type: UserType) => {
    switch (type) {
      case 'admin': return { text: 'ADMIN', icon: '⚡', color: 'bg-red-500' };
      case 'premium': return { text: 'PREMIUM', icon: '💎', color: 'bg-purple-500' };
      case 'free': return { text: 'FREE', icon: '🆓', color: 'bg-gray-500' };
      default: return { text: 'FREE', icon: '🆓', color: 'bg-gray-500' };
    }
  };

  if (!user) {
    return (
      <div className="min-h-screen bg-slate-900 flex items-center justify-center">
        <div className="text-white text-xl">Please log in to view your profile.</div>
      </div>
    );
  }

  if (isLoading || playerProgressLoading) {
    return (
      <div className="min-h-screen bg-slate-900 flex items-center justify-center">
        <div className="text-white text-xl">Loading profile...</div>
      </div>
    );
  }

  const userBadge = getUserTypeBadge(userType);

  const patternBackground = {
    backgroundImage: 'url(/casino-pattern.png)',
    backgroundSize: '300px 300px',
    backgroundRepeat: 'repeat',
    backgroundBlendMode: 'overlay'
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-slate-900 to-slate-800">
      {/* Background pattern */}
      <div 
        className="absolute inset-0 opacity-10 z-0"
        style={patternBackground}
      ></div>
      
      {/* Standardized AppHeader with coin balance */}
      <AppHeader 
        title={t('profile.title', 'Your Profile')} 
        showBackButton={true}
        backTo="/"
        playerBalance={playerData?.coins || 0}
      />
      
      <div className="container mx-auto px-4 py-8 pt-20">
        <div className="max-w-5xl mx-auto">  
          <button
            onClick={() => auth.signOut()}
            className="px-4 py-2 bg-red-600/80 hover:bg-red-500/80 rounded-lg text-white font-medium transition-all duration-200"
          >
            Sign Out
          </button>
        </div>
      </div>

      {/* Rest of the page content */}
      <div className="container mx-auto px-6 py-8 max-w-6xl">
        {/* Profile Header Card */}
        <div className="bg-slate-900/90 backdrop-blur-sm rounded-xl border border-amber-400/20 p-6 mb-8">
          <div className="flex flex-col md:flex-row items-center gap-6">
            {/* Avatar */}
            <div className="relative">
              <div className="w-24 h-24 bg-gradient-to-br from-amber-400 to-orange-500 rounded-full flex items-center justify-center text-3xl font-bold text-slate-900">
                {user.displayName?.[0] || user.email?.[0]?.toUpperCase() || '?'}
              </div>
              {/* User Type Badge */}
              <div className={`absolute -bottom-2 -right-2 ${userBadge.color} px-2 py-1 rounded-full text-xs font-bold text-white flex items-center gap-1`}>
                <span>{userBadge.icon}</span>
                <span>{userBadge.text}</span>
              </div>
            </div>

            {/* User Info */}
            <div className="flex-1 text-center md:text-left">
              <h2 className="text-2xl font-bold text-white mb-2">
                {user.displayName || 'Player'}
              </h2>
              <p className="text-slate-300 mb-3">{user.email}</p>
              
              {/* Stats */}
              <div className="grid grid-cols-3 gap-4 mt-4">
                <div className="text-center">
                  <div className="text-2xl font-bold text-green-400">
                    {playerData?.playerCoins || 0}💰
                  </div>
                  <div className="text-sm text-slate-400">Coins</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-blue-400">
                    {userProfile?.totalWins || 0}
                  </div>
                  <div className="text-sm text-slate-400">Wins</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-purple-400">
                    {userProfile?.achievements.length || 0}
                  </div>
                  <div className="text-sm text-slate-400">Achievements</div>
                </div>
              </div>
            </div>

            {/* Upgrade to Premium (for free users) */}
            {userType === 'free' && (
              <div className="text-center">
                <button className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-500 hover:to-pink-500 text-white px-6 py-3 rounded-lg font-bold transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-105">
                  ⭐ Upgrade to Premium
                </button>
                <p className="text-xs text-slate-400 mt-2">Unlock exclusive features!</p>
              </div>
            )}
          </div>
        </div>

        {/* Tab Navigation */}
        <div className="flex flex-wrap gap-2 mb-6">
          {['profile', 'tokens', 'dealers', 'achievements', ...(userType === 'admin' ? ['admin'] : [])].map((tab) => (
            <button
              key={tab}
              onClick={() => setActiveTab(tab as any)}
              className={`px-4 py-2 rounded-lg font-medium transition-all duration-200 ${
                activeTab === tab
                  ? 'bg-amber-500 text-slate-900'
                  : 'bg-slate-800/80 text-slate-300 hover:bg-slate-700/80'
              }`}
            >
              {tab.charAt(0).toUpperCase() + tab.slice(1)}
            </button>
          ))}
        </div>

        {/* Tab Content */}
        <div className="bg-slate-900/90 backdrop-blur-sm rounded-xl border border-amber-400/20 p-6">
          {activeTab === 'profile' && (
            <div>
              <h3 className="text-xl font-bold text-amber-400 mb-4">Profile Information</h3>
              <div className="grid md:grid-cols-2 gap-6">
                <div>
                  <h4 className="font-semibold text-white mb-3">Account Details</h4>
                  <div className="space-y-2 text-slate-300">
                    <p><span className="text-slate-400">Email:</span> {user.email}</p>
                    <p><span className="text-slate-400">Member since:</span> {user.metadata.creationTime ? new Date(user.metadata.creationTime).toLocaleDateString() : 'Unknown'}</p>
                    <p><span className="text-slate-400">Account Type:</span> <span className={`font-bold ${userType === 'admin' ? 'text-red-400' : userType === 'premium' ? 'text-purple-400' : 'text-gray-400'}`}>{userType.toUpperCase()}</span></p>
                  </div>
                </div>
                <div>
                  <h4 className="font-semibold text-white mb-3">Game Statistics</h4>
                  <div className="space-y-2 text-slate-300">
                    <p><span className="text-slate-400">Total Wins:</span> {userProfile?.totalWins || 0}</p>
                    <p><span className="text-slate-400">Total Coins Earned:</span> {userProfile?.totalCoinsEarned || 0}</p>
                    <p><span className="text-slate-400">Dealers Unlocked:</span> {Object.keys(playerData?.dealerProgress || {}).length}</p>
                  </div>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'tokens' && (
            <div>
              <h3 className="text-xl font-bold text-amber-400 mb-6">Token Shop</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {tokenDeals.map((deal) => (
                  <div
                    key={deal.id}
                    className={`relative bg-slate-800/80 rounded-xl border p-6 transition-all duration-200 hover:scale-105 hover:shadow-xl ${
                      deal.popular 
                        ? 'border-amber-400 shadow-amber-400/20' 
                        : 'border-slate-600 hover:border-slate-500'
                    }`}
                  >
                    {/* Popular Badge */}
                    {deal.popular && (
                      <div className="absolute -top-2 left-1/2 transform -translate-x-1/2 bg-amber-500 text-slate-900 px-3 py-1 rounded-full text-xs font-bold">
                        MOST POPULAR
                      </div>
                    )}

                    <div className="text-center">
                      <h4 className="text-lg font-bold text-white mb-2">{deal.name}</h4>
                      
                      {/* Coins */}
                      <div className="text-3xl font-bold text-green-400 mb-2">
                        {deal.coins.toLocaleString()}💰
                      </div>
                      
                      {/* Bonus */}
                      {deal.bonus && (
                        <div className="text-amber-400 text-sm mb-3">
                          {deal.bonus}
                        </div>
                      )}

                      {/* Price */}
                      <div className="mb-4">
                        {deal.originalPrice && (
                          <span className="text-slate-400 line-through text-sm mr-2">
                            ${deal.originalPrice}
                          </span>
                        )}
                        <span className="text-2xl font-bold text-white">
                          ${deal.price}
                        </span>
                      </div>

                      {/* Purchase Button */}
                      <button
                        onClick={() => handlePurchaseTokens(deal)}
                        disabled={purchaseStatus[deal.id] === 'processing'}
                        className={`w-full py-3 rounded-lg font-bold transition-all duration-200 ${
                          purchaseStatus[deal.id] === 'success'
                            ? 'bg-green-600 text-white'
                            : purchaseStatus[deal.id] === 'error'
                            ? 'bg-red-600 text-white'
                            : purchaseStatus[deal.id] === 'processing'
                            ? 'bg-yellow-600 text-slate-900'
                            : deal.popular
                            ? 'bg-gradient-to-r from-amber-500 to-orange-500 hover:from-amber-400 hover:to-orange-400 text-slate-900'
                            : 'bg-slate-700 hover:bg-slate-600 text-white'
                        }`}
                      >
                        {purchaseStatus[deal.id] === 'processing' && '⏳ Processing...'}
                        {purchaseStatus[deal.id] === 'success' && '✅ Purchased!'}
                        {purchaseStatus[deal.id] === 'error' && '❌ Failed'}
                        {!purchaseStatus[deal.id] || purchaseStatus[deal.id] === 'idle' ? 'Purchase' : ''}
                      </button>
                    </div>
                  </div>
                ))}
              </div>

              {/* Free User Limitations */}
              {userType === 'free' && (
                <div className="mt-8 bg-yellow-900/20 border border-yellow-400/30 rounded-lg p-4">
                  <div className="flex items-center gap-3">
                    <span className="text-2xl">🔒</span>
                    <div>
                      <h4 className="font-bold text-yellow-400">Free Account Limitations</h4>
                      <p className="text-yellow-200 text-sm">
                        • Limited to 1000 daily coins
                        • Access to basic dealers only
                        • Standard outfit progression
                      </p>
                      <button className="mt-2 text-yellow-400 hover:text-yellow-300 underline text-sm">
                        Upgrade to Premium to unlock unlimited features!
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </div>
          )}

          {activeTab === 'dealers' && (
            <div>
              <h3 className="text-xl font-bold text-amber-400 mb-6">Dealers</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {userProfile?.unlockedDealers.map((dealerId) => (
                  <div key={dealerId} className="bg-slate-800/80 rounded-lg p-4 border border-slate-600">
                    <div className="flex items-center gap-3">
                      <span className="text-2xl">🏰</span>
                      <div>
                        <h4 className="font-bold text-white">{dealerId}</h4>
                        <button
                          onClick={() => handleUnlockDealer(dealerId)}
                          className="text-yellow-400 hover:text-yellow-300 underline text-sm"
                        >
                          Unlock
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {activeTab === 'achievements' && (
            <div>
              <h3 className="text-xl font-bold text-amber-400 mb-6">Achievements</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {userProfile?.achievements.map((achievement, index) => (
                  <div key={index} className="bg-slate-800/80 rounded-lg p-4 border border-slate-600">
                    <div className="flex items-center gap-3">
                      <span className="text-2xl">🏆</span>
                      <div>
                        <h4 className="font-bold text-white">{achievement}</h4>
                        <p className="text-slate-400 text-sm">Unlocked recently</p>
                      </div>
                    </div>
                  </div>
                ))}

                {/* Locked Achievements for Free Users */}
                {userType === 'free' && (
                  <div className="bg-yellow-900/20 border border-yellow-400/30 rounded-lg p-4">
                    <div className="flex items-center gap-3">
                      <span className="text-2xl">🔒</span>
                      <div>
                        <h4 className="font-bold text-yellow-400">Locked Achievements</h4>
                        <p className="text-yellow-200 text-sm">
                          • Unlock exclusive achievements with Premium
                        </p>
                        <button className="mt-2 text-yellow-400 hover:text-yellow-300 underline text-sm">
                          Upgrade to Premium to unlock unlimited features!
                        </button>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}

          {activeTab === 'admin' && userType === 'admin' && (
            <div>
              <h3 className="text-xl font-bold text-amber-400 mb-6">Admin Panel</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <button
                  onClick={() => navigate('/dealer-management')}
                  className="bg-slate-800/80 hover:bg-slate-700/80 rounded-lg p-6 border border-slate-600 hover:border-slate-500 transition-all duration-200 text-left"
                >
                  <div className="text-2xl mb-3">👩‍💼</div>
                  <h4 className="font-bold text-white mb-2">Dealer Management</h4>
                  <p className="text-slate-400 text-sm">Add, edit, and manage dealers</p>
                </button>

                <button
                  onClick={() => navigate('/admin-page')}
                  className="bg-slate-800/80 hover:bg-slate-700/80 rounded-lg p-6 border border-slate-600 hover:border-slate-500 transition-all duration-200 text-left"
                >
                  <div className="text-2xl mb-3">⚙️</div>
                  <h4 className="font-bold text-white mb-2">Admin Dashboard</h4>
                  <p className="text-slate-400 text-sm">System administration</p>
                </button>

                <div className="bg-slate-800/80 rounded-lg p-6 border border-slate-600">
                  <div className="text-2xl mb-3">📊</div>
                  <h4 className="font-bold text-white mb-2">Analytics</h4>
                  <p className="text-slate-400 text-sm">View platform statistics</p>
                  <p className="text-green-400 text-xs mt-2">Coming Soon</p>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProfilePage; 